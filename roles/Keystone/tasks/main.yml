---
# tasks file for roles/Keystone
# this roles only runs in controller node , u need to check if the vars/main.yml contains var target_hostname
- name: check the hostname before start tasks
  block:
    - name: check if hostname is {{ target_hostname }}
      ansible.builtin.debug:
        msg: "the target host {{ inventory_hostname }}'s hostname 是 {{ ansible_hostname }}，not controller host，please check the hostname and rerun the role"
      when: ansible_hostname != target_hostname

    - name: stop running in wrong host
      meta: end_host
      when: ansible_hostname != target_hostname

- name: ensure mark directory exists
  ansible.builtin.file:
    path: "{{ mark_dir_path }}"
    state: directory
    mode: '0755'

- name: create keystone_db and keystone_db_user
  block:
    - name: create keystone_db
      community.mysql.mysql_db:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ keystone_db_conf.db_name }}"
        state: present 
      
    - name: create keystone db_user
      community.mysql.mysql_user:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ keystone_db_conf.db_user_name }}"
        password: "{{ keystone_db_conf.db_user_password }}"
        priv: "{{ keystone_db_conf.db_name }}.*:ALL"
        state: present
        host: "{{ item }}"
      loop:
        - "localhost"
        - "%"

- name: install and configure keystone 
  block: 
    - name: install keystone packages
      ansible.builtin.dnf:
        name: "{{ keystone_packages }}"
        state: latest

    - name: configrue keystone.conf
      ansible.builtin.template:
        src: "{{ keystone_conf_template_path }}"
        dest: "{{ keystone_conf_path }}"
 
- name: synce the keystone_db
  block: 
    - name: Ensure Keystone database is synced
      ansible.builtin.command: keystone-manage db_sync
      become: yes
      become_user: keystone
      #here i use .db_synced empty file to mark that this keystone db has been synced,if the mark file exists,this task won't run
      args:
        creates: "{{ keystone_mark_path.db_synced_mark_path }}"
      register: keystone_db_sync
      ignore_errors: false
      
    - name: Show db_sync output
      ansible.builtin.debug:
        msg: "{{ keystone_db_sync.stdout_lines }}"

    #after running the task 'Ensure Keystone database is synced' this task will rouch an empty file to mark that keystone has been synced,next time u run the play books,the synce task won't run again          
    - name: Mark Keystone database as synced
      ansible.builtin.file:
        path: "{{ keystone_mark_path.db_synced_mark_path }}"
        state: touch
      when: keystone_db_sync.changed

- name: keystone key initialization
  block:
    - name: initialize keystone fernet keys
      ansible.builtin.command: keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
      args:
        creates: "{{ keystone_mark_path.fernet_initialized_mark_path }}"

    - name: mark fernet initialization done
      ansible.builtin.file:
        path: "{{ keystone_mark_path.fernet_initialized_mark_path }}"
        state: touch
      
    - name: initialize keystone credential keys
      ansible.builtin.command: keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
      args:
        creates: "{{ keystone_mark_path.credential_initialized_mark_path }}"

    - name: mark credential initialization done
      ansible.builtin.file:
        path: "{{ keystone_mark_path.credential_initialized_mark_path }}"
        state: touch

- name: Keystone bootstrap initialization
  block:
    - name: Bootstrap Keystone
      # u need to konw the url host is keystone host,usually the keystone host is controller ,so u can write controller instead of write actual keystone host,if your keystone install other hosts(whose name is not controller in target hosts file,u shell change the hostname in the url) 
      ansible.builtin.shell: |
        keystone-manage bootstrap \
        --bootstrap-password 000000 \
        --bootstrap-admin-url http://controller:5000/v3/ \
        --bootstrap-internal-url http://controller:5000/v3/ \
        --bootstrap-public-url http://controller:5000/v3/ \
        --bootstrap-region-id RegionOne 
      args:
        creates: "{{ keystone_mark_path.keystone_bootstrap_mark_path }}"

    - name: mark keystone bootstrap done
      ansible.builtin.file:
        path: "{{ keystone_mark_path.keystone_bootstrap_mark_path }}"
        state: touch

- name: configure apache conf file
  block:
    - name: configure http server 
      ansible.builtin.template:
        src: "{{apache_conf_template_path}}"
        dest: "{{ apache_conf_path }}"

    - name: make soft-link
      ansible.builtin.file:
        src: /usr/share/keystone/wsgi-keystone.conf
        dest: /etc/httpd/conf.d/wsgi-keystone.conf
        state: link

    - name: start and enable httpd
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: yes

- name: configue admin env vars
  block:
    - name: configure env vars
      ansible.builtin.template:
        src: "{{ openrc_admin_template_path }}"
        dest: "{{ openrc_admin_path }}"

    - name: enable the env vars
      ansible.builtin.shell: |
        source /etc/profile.d/openstack-admin.sh 

- name: create default and example,domain and project
  block:
    - name: create service project in default domain
      openstack.cloud.project:
        name: "service"
        description: "Service Project"
        domain: "default"
        state: present
        enabled: yes
      register: service_project_create_result

    - name: show service project creation result
      ansible.builtin.debug:
        var: service_project_create_result

