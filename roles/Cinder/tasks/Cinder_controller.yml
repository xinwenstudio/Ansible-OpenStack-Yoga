---
- name: check if host is in target group before start tasks
  block:
    - name: debug if host is not in compute group
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} is not in compute group, stopping execution"
      when: "'controller' not in group_names"

    - name: stop running role on hosts not in compute
      meta: end_host
      when: "'controller' not in group_names"

- name: ensure mark directory exists
  ansible.builtin.file:
    path: "{{ mark_dir_path }}"
    state: directory
    mode: '0755'

- name: create Neutron db and db_user
  block:
    - name: create cinder_db
      community.mysql.mysql_db:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ cinder_db_conf.db_name }}"
        state: present

    - name: create cinder db_user
      community.mysql.mysql_user:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ cinder_db_conf.db_user_name }}"
        password: "{{ cinder_db_conf.db_user_password }}"
        priv: "{{ cinder_db_conf.db_name }}.*:ALL"
        state: present
        host: "{{ item }}"
      loop:
        - "localhost"
        - "%"

- name: create cinder service user and endpoints
  block:
    - name: create cinder user in default domain
      openstack.cloud.identity_user:
        name: cinder
        domain: default
        password: "{{ openstack_user_password.cinder }}"
        state: present

    - name: assign admin role to cinder in service project
      openstack.cloud.role_assignment:
        user: cinder
        project: service
        role: admin
        state: present

    - name: create cinder service
      openstack.cloud.catalog_service:
        name: cinderv3
        service_type: volumev3
        description: "OpenStack Block Storage"
        state: present

    - name: create cinder endpoints
      openstack.cloud.endpoint:
        service: cinderv3
        endpoint_interface: "{{ item.interface }}"
        url: "{{ item.url }}"
        region: RegionOne
        state: present
      loop:
        - { interface: "public",   url: "http://controller:8776/v3/%(project_id)s" }
        - { interface: "internal", url: "http://controller:8776/v3/%(project_id)s" }
        - { interface: "admin",    url: "http://controller:8776/v3/%(project_id)s" }

- name: install and configure cinder
  block:
    - name: install cinder packages
      ansible.builtin.dnf:
        name: "{{ cinder_packages}}"
        state: latest

    - name: deploy cinder_conf file
      ansible.builtin.template:
        src: "{{ cinder_conf_template_path.cinder_conf }}"
        dest: "{{ cinder_conf_path.cinder_conf }}"

- name: synce the cinder db
  block:
    - name: ensure cinder database is synced
      ansible.builtin.command: cinder-manage db sync
      become: yes
      become_user: cinder
      #here i use .db_synced empty file to mark that this nova db has been synced,if the mark file exists,this task won't run
      args:
        creates: "{{ cinder_mark_path.cinder_db_synced_mark_path }}"
      register: cinder_db_sync
      ignore_errors: false

    - name: Mark cinder database as synced
      ansible.builtin.file:
        path: "{{ cinder_mark_path.cinder_db_synced_mark_path }}"
        state: touch
      when: cinder_db_sync == 0

    - name: Show db_sync output
      ansible.builtin.debug:
        msg: "{{ cinder_db_sync.stdout_lines }}"
 

- name: conf nova to use cinder
  community.general.ini_file:
    path: "{{ cinder_conf_path.nova_conf }}"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
  loop:
    - { section: cinder,option: os_region_name,value: RegionOne }
  notify:
    - restart openstack-nova-api
    - start and enable cinder services
    - restart httpd
