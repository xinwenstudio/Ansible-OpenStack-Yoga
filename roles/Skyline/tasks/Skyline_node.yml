---
- name: check if host is in target group before start tasks
  block:
    - name: debug if host is not in skyline group
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} is not in skyline group, stopping execution"
      when: "'skyline' not in group_names"

    - name: stop running role on hosts not in skyline
      meta: end_host
      when: "'skyline' not in group_names"

- name: install docker-ce from HUAWEI MIRRORSITE and add Daemon.json
  block:
    - name: Remove old versions of Docker
      ansible.builtin.dnf:
        name: "{{ uninstall_old_docker_packages }}"
        state: absent

    - name: install required system packages
      ansible.builtin.dnf:
        name: "{{ docker_packages }}" 
        state: latest

    - name: Download docker-ce repo form Huawei cloud
      ansible.builtin.get_url:
        url: https://mirrors.huaweicloud.com/docker-ce/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: '0644'

    - name: replease docker repo domain to huawei cloud
      ansible.builtin.replace:
        path: /etc/yum.repos.d/docker-ce.repo
        regexp: 'download.docker.com'
        replace: 'mirrors.huaweicloud.com/docker-ce'

    - name: Make DNF cache
      ansible.builtin.command: dnf makecache
      changed_when: false

    - name: Install Docker CE
      ansible.builtin.dnf:
        name: docker-ce
        state: present

    - name: Enable and start Docker service
      ansible.builtin.service:
        name: docker
        enabled: yes
        state: started

    - name: deploy /etc/docker/daemon.json
      ansible.builtin.template:
        src: "{{ skyline_conf_template_path.daemon_json_path }}"
        dest: "{{ skyline_conf_path.daemon_json_path }}"

    - name: restart docker
      ansible.builtin.service:
        name: docker
        state: restarted
        enabled: yes


- name: Ensure required directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop: "{{ skyline_required_dirs }}"

- name: Render Skyline config file from template
  ansible.builtin.template:
    src: "{{ skyline_conf_template_path.skyline_config_path }}"
    dest: "{{ skyline_conf_path.skyline_config_path }}"
    mode: '0644'

- name: Pull Skyline Docker image
  community.docker.docker_image:
    name: "{{ skyline_image }}"
    source: pull

- name: Run Skyline bootstrap container
  community.docker.docker_container:
    name: skyline_bootstrap
    image: "{{ skyline_image }}"
    state: started
    detach: true
    network_mode: host
    volumes:
      - "{{ skyline_conf_path.skyline_config_path }}:/etc/skyline/skyline.yaml"
      - "/var/log:/var/log"
    env:
      KOLLA_BOOTSTRAP: ""

- name: Wait for bootstrap container to finish
  ansible.builtin.shell: |
    while docker ps -a --filter "name=skyline_bootstrap" --format "{{'{{.Status}}'}}" | grep -q "^Up"; do
      sleep 2
    done
  changed_when: false

- name: Show bootstrap logs
  ansible.builtin.shell: docker logs skyline_bootstrap
  register: bootstrap_logs
  changed_when: false

- name: Print bootstrap logs
  ansible.builtin.debug:
    msg: "{{ bootstrap_logs.stdout_lines }}"

- name: Remove Skyline bootstrap container
  community.docker.docker_container:
    name: skyline_bootstrap
    state: absent
    force_kill: true

- name: Run Skyline final container
  community.docker.docker_container:
    name: skyline
    image: "{{ skyline_image }}"
    state: started
    restart_policy: always
    detach: true
    network_mode: host
    volumes:
      - "{{ skyline_conf_path.skyline_config_path }}:/etc/skyline/skyline.yaml"
      - "/var/log:/var/log"

