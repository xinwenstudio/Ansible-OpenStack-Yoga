---
# tasks file for roles/db_server
- name: check the hostname before start tasks
  block:
    - name: check if hostname is {{ target_hostname }}
      ansible.builtin.debug:
        msg: "the target host {{ inventory_hostname }}'s hostname 是 {{ ansible_hostname }}，not controller host，please check the hostname and rerun the role"
      when: ansible_hostname !=  target_hostname 

    - name: stop running in wrong host 
      meta: end_host
      when: ansible_hostname != target_hostname 


- name: install mariadb-server 
  ansible.builtin.dnf:
    name: "{{ mariadb_packages }}"
    state: latest

- name: configure openstack mariadb file
  ansible.builtin.template:
    src: "{{ mariadb_openstack_conf_templates_path }}"
    dest: "{{ mariadb_openstack_conf_dest_path }}"
    owner: root
    group: root
    mode: '0644'
  notify: restart mariadb

- name: ensure mariadb is stared and enabled
  ansible.builtin.service:
    name: mariadb
    state: started
    enabled: yes

#attention,this blcok uses unix_sicket on target hosts to communicate with the mariadb-server,i didn't set the root passsword,so u don't need to use login_password to set root password
- name: init mariadb-server
  block: 
    - name: delete test-user
      community.mysql.mysql_user:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: ''
        state: absent
        #host_all means apply to not only 'localhost' but also '%'
        host_all: true

    - name: check if root@'%' is exits
      community.mysql.mysql_query:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        query: "SELECT COUNT(*) AS count FROM mysql.user WHERE user='root' AND host='%'"
      register: root_percent_user     

        #- name: create root@'%' if not exits
        #login_user: root
        #login_password: ''     
        #login_host: localhost
        #name: root
        #host: '%'
        #password: ''
        #priv: '*.*:ALL,GRANT'
        #state: present
        #when: root_percent_user.query_result[0].count == 0

    - name: permit root remote login 
      community.mysql.mysql_user:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: root
        host: '%'
        password: ''
        priv: '*.*:ALL,GRANT'
        state: present
    
    - name: delete test databases
      community.mysql.mysql_db:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: test
        state: absent

    - name: flush privileges
      community.mysql.mysql_query:
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        login_user: root
        query: FLUSH PRIVILEGES;
