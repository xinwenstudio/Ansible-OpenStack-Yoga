---
- name: check the hostname before start tasks
  block:
    - name: check if hostname is {{ target_hostname }}
      ansible.builtin.debug:
        msg: "the target host {{ inventory_hostname }}'s hostname is {{ ansible_hostname }}，not controller host，please check the hostname and rerun the role"
      when: ansible_hostname != target_hostname

    - name: stop running in wrong host
      meta: end_host
      when: ansible_hostname != target_hostname

- name: ensure mark directory exists
  ansible.builtin.file:
    path: "{{ mark_dir_path }}"
    state: directory
    mode: '0755'

- name: create nova_db and db_user
  block:
    - name: create nova_api_db
      community.mysql.mysql_db:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ nova_db_conf.nova_api_db_name }}"
        state: present

    - name: create nova_db
      community.mysql.mysql_db:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ nova_db_conf.nova_db_name }}"
        state: present

    - name: create nova_cell0_db
      community.mysql.mysql_db:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ nova_db_conf.nova_cell0_db_name }}"
        state: present

    - name: create nova db_user
      community.mysql.mysql_user:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ nova_db_conf.db_user_name }}"
        password: "{{ nova_db_conf.db_user_password }}"
        priv: "nova_api.*:ALL"
        append_privs: yes
        state: present
        host: "{{ item }}"
      loop:
        - "localhost"
        - "%"

    - name: create nova db_user
      community.mysql.mysql_user:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ nova_db_conf.db_user_name }}"
        password: "{{ nova_db_conf.db_user_password }}"
        priv: "nova_cell0.*:ALL"
        append_privs: yes
        state: present
        host: "{{ item }}"
      loop:
        - "localhost"
        - "%"

    - name: create nova db_user
      community.mysql.mysql_user:
        login_user: root
        login_unix_socket: "{{ mariadb_unix_socket_path }}"
        name: "{{ nova_db_conf.db_user_name }}"
        password: "{{ nova_db_conf.db_user_password }}"
        priv: "nova.*:ALL"
        append_privs: yes
        state: present
        host: "{{ item }}"
      loop:
        - "localhost"
        - "%"


- name: Create nova service user, role, service and endpoints
  block:
    # creat nova user
    - name: Create nova user in default domain
      openstack.cloud.identity_user:
        name: nova
        domain: default
        password: "{{ openstack_user_password.nova }}"
        state: present
    
    - name: Assign admin role to nova user in service project
      openstack.cloud.role_assignment:
        user: nova
        project: service
        role: admin
        state: present

    - name: Create nova service entity
      openstack.cloud.catalog_service:
        name: nova
        service_type: compute
        description: "OpenStack Compute Service"
        state: present

    - name: Create nova public endpoint
      openstack.cloud.endpoint:
        service: nova
        endpoint_interface: public
        url: "http://controller:8774/v2.1"
        region: RegionOne
        state: present

    - name: Create nova internal endpoint
      openstack.cloud.endpoint:
        service: nova
        endpoint_interface: internal
        url: "http://controller:8774/v2.1"
        region: RegionOne
        state: present

    - name: Create nova admin endpoint
      openstack.cloud.endpoint:
        service: nova
        endpoint_interface: admin
        url: "http://controller:8774/v2.1"
        region: RegionOne
        state: present

- name: install and configure nova service
  block:
    - name: install nova packages
      ansible.builtin.dnf:
        name: "{{ nova_packages }}"
        state: latest

    - name: deploy nova.conf from templates
      ansible.builtin.template:
        src: "{{ nova_conf_template_path }}"
        dest: "{{ nova_conf_path }}"

    
- name: synce the nova db
  block:
    - name: ensure nova_api database is synced
      ansible.builtin.command: nova-manage api_db sync
      become: yes
      become_user: nova
      #here i use .db_synced empty file to mark that this nova db has been synced,if the mark file exists,this task won't run
      args:
        creates: "{{ nova_mark_path.nova_api_db_synced_mark_path }}"
      register: nova_api_db_sync
      ignore_errors: false

    - name: Mark nova_api database as synced
      ansible.builtin.file:
        path: "{{ nova_mark_path.nova_api_db_synced_mark_path }}"
        state: touch
      when: nova_api_db_sync == 0


    - name: Show db_sync output
      ansible.builtin.debug:
        msg: "{{ nova_api_db_sync.stdout_lines }}"


    - name: ensure nova_cell0 database is synced
      ansible.builtin.command: nova-manage cell_v2 map_cell0
      become: yes
      become_user: nova
      #here i use .db_synced empty file to mark that this nova db has been synced,if the mark file exists,this task won't run
      args:
        creates: "{{ nova_mark_path.nova_cell0_db_synced_mark_path }}"
      register: nova_cell0_db_sync
      ignore_errors: false

    - name: Mark nova_cell0 database as synced
      ansible.builtin.file:
        path: "{{ nova_mark_path.nova_cell0_db_synced_mark_path }}"
        state: touch
      when: nova_cell0_db_sync.rc == 0


    - name: Show db_sync output
      ansible.builtin.debug:     
        msg: "{{ nova_cell0_db_sync.stdout_lines }}"

    - name: create nova_cell1 
      ansible.builtin.command: nova-manage cell_v2 create_cell --name=cell1 --verbose
      become: yes
      become_user: nova
      #here i use .db_synced empty file to mark that this nova db has been synced,if the mark file exists,this task won't run
      args:
        creates: "{{ nova_mark_path.nova_cell1_created_mark_path }}"
      register: nova_cell1_created
      ignore_errors: false

    - name: Mark nova_cell0 database as synced
      ansible.builtin.file:
        path: "{{ nova_mark_path.nova_cell1_created_mark_path }}"
        state: touch
      when: nova_cell1_created.rc == 0


    - name: Show db_sync output
      ansible.builtin.debug:
        msg: "{{ nova_cell0_db_sync.stdout_lines }}"


    - name: ensure nova database is synced
      ansible.builtin.command: nova-manage db sync
      become: yes
      become_user: nova
      #here i use .db_synced empty file to mark that this nova db has been synced,if the mark file exists,this task won't run
      args:
        creates: "{{ nova_mark_path.nova_db_synced_mark_path }}"
      register: nova_db_sync
      ignore_errors: false

    - name: Mark nova database as synced
      ansible.builtin.file:
        path: "{{ nova_mark_path.nova_db_synced_mark_path }}"
        state: touch
      when: nova_db_sync == 0


    - name: Show db_sync output
      ansible.builtin.debug:
        msg: "{{ nova_db_sync.stdout_lines }}"

    - name: check if nova database is create correctly
      ansible.builtin.command: nova-manage cell_v2 list_cells
      become: yes
      become_user: nova
      register: nova_check_result

    - name: Show check result
      ansible.builtin.debug:
        msg: "{{ nova_check_result.stdout_lines }}"


- name: Copy a single file from role's files folder to target
  ansible.builtin.copy:
    src: files/nova_controller_service_restart.sh
    dest: /root/nova_controller_service_restart.sh


- name: enable and start all nova services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - openstack-nova-api.service
    - openstack-nova-scheduler.service
    - openstack-nova-conductor.service
    - openstack-nova-novncproxy.service

